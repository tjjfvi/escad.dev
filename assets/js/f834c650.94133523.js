"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[462],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var u=n.createContext({}),c=function(e){var t=n.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(u,".").concat(m)]||d[m]||p[m]||i;return r?n.createElement(f,o(o({ref:t},l),{},{components:r})):n.createElement(f,o({ref:t},l))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=d;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=r[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3836:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return c},assets:function(){return l},toc:function(){return p},default:function(){return m}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],s={sidebar_position:5},u="Parameters",c={unversionedId:"getting-started/parameters",id:"getting-started/parameters",title:"Parameters",description:"Last page, we saw how we could edit the constants in our model to make different",source:"@site/docs/getting-started/parameters.md",sourceDirName:"getting-started",slug:"/getting-started/parameters",permalink:"/docs/getting-started/parameters",editUrl:"https://github.com/tjjfvi/escad/tree/main/docs/docs/getting-started/parameters.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Hierarchy",permalink:"/docs/getting-started/hierarchy"},next:{title:"Running Locally",permalink:"/docs/getting-started/running-locally"}},l={},p=[],d={toc:p};function m(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"parameters"},"Parameters"),(0,i.kt)("p",null,"Last page, we saw how we could edit the constants in our model to make different\nsizes of trees."),(0,i.kt)("p",null,"However, we had to manually edit the code, which isn't very friendly."),(0,i.kt)("p",null,"To this end, ",(0,i.kt)("inlineCode",{parentName:"p"},"escad")," supports defining parameters for your model, which can\nthen be set in the client."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'// highlight-start\n// We need to import a few new functions.\nimport { escad, parametrize, numberParam, booleanParam } from "https://escad.dev/core/mod.ts"\n// highlight-end\nimport "https://escad.dev/3d/register.ts"\n\n// highlight-start\n// Now, we define what parameters our model takes.\nconst paramDef = {\n  trunkRadius: numberParam({ defaultValue: 2 }),\n  trunkHeight: numberParam({ defaultValue: 16 }),\n  leavesRadius: numberParam({ defaultValue: 6 }),\n  stretchLeaves: booleanParam({ defaultValue: true }),\n}\n// highlight-end\n\n// highlight-start\n// `parameterize` attaches `paramDef` to your function, so escad knows what parameters it expects.\n// (If you\'re using TypeScript, it also implicitly types `params` based on `paramDef`.)\nexport default parametrize(paramDef, (params) => {\n  // `params` will be an object containing the parameters, as specified by `paramDef`.\n  // We\'ll destructure them so we can use them like we did the constants from before.\n  const { trunkRadius, trunkHeight, leavesRadius, stretchLeaves } = params\n// highlight-end\n\n// highlight-start\n  const leavesStretchFactor = stretchLeaves ? 1.5 : 1\n// highlight-end\n\n  const trunk = escad\n    .cylinder({ radius: trunkRadius, height: trunkHeight })\n    .shiftZ(1)\n\n  const leaves = escad\n    .sphere({ radius: leavesRadius })\n    .scaleZ(leavesStretchFactor)\n    .translateZ(trunkHeight)\n\n  return escad.union({ trunk, leaves })\n})\n')),(0,i.kt)("p",null,"You should see a new 'Parameters' panel appear. If you open it, you can tweak\nthe parameters we just defined. Try making the tree taller by setting 'Trunk\nHeight' to 20. You should see the model automatically update based on our new\nparameters."))}m.isMDXComponent=!0}}]);