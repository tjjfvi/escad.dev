"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[193],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return g}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),g=a,f=p["".concat(c,".").concat(g)]||p[g]||d[g]||o;return n?r.createElement(f,i(i({ref:t},l),{},{components:n})):r.createElement(f,i({ref:t},l))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},7223:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return u},assets:function(){return l},toc:function(){return d},default:function(){return g}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],s={sidebar_position:3},c="Enough Cubes Already",u={unversionedId:"getting-started/enough-cubes-already",id:"getting-started/enough-cubes-already",title:"Enough Cubes Already",description:"Let's change it up from simple boxes. Here's a simple tree model:",source:"@site/docs/getting-started/enough-cubes-already.md",sourceDirName:"getting-started",slug:"/getting-started/enough-cubes-already",permalink:"/docs/getting-started/enough-cubes-already",editUrl:"https://github.com/tjjfvi/escad/tree/main/docs/docs/getting-started/enough-cubes-already.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Something More",permalink:"/docs/getting-started/something-more"},next:{title:"Hierarchy",permalink:"/docs/getting-started/hierarchy"}},l={},d=[],p={toc:d};function g(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"enough-cubes-already"},"Enough Cubes Already"),(0,o.kt)("p",null,"Let's change it up from simple boxes. Here's a simple tree model:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { escad } from "https://escad.dev/core/mod.ts"\nimport "https://escad.dev/3d/register.ts"\n\nexport default () => {\n// highlight-start\n  // By putting these constants in variables, we can easily reuse them.\n  // Later, if we want to tweak the model, we only have to update it one place.\n  const trunkRadius = 2\n  const trunkHeight = 16\n  const leavesRadius = 6\n  const leavesStretchFactor = 1.5\n\n  // Here, we save parts of the model in variables, to make it clearer what\'s happening.\n  const trunk = escad\n    .cylinder({ radius: trunkRadius, height: trunkHeight })\n    .shiftZ(1)       // we use `trunkHeight` here ^\n\n  const leaves = escad\n    .sphere({ radius: leavesRadius })\n    .scaleZ(leavesStretchFactor)\n    .translateZ(trunkHeight)\n    // and also here ^\n\n  // `union` (from the `3d` library) adds two meshes together.\n  // You could also write it as `trunk.add(leaves)`, but this is a little clearer.\n  return escad.union(trunk, leaves)\n// highlight-end\n}\n')))}g.isMDXComponent=!0}}]);